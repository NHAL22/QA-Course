import {test} from "@playwright/test";
import LandingPage from "./pages/landingPage";
import IrregularHoursPage from "./pages/irregularHoursPage";
import HolidayEntitlementPage from "./pages/holidayEntitlementPage";
import WorkOutHolidayPage from "./pages/workOutHolidayPage";
import WorkedPerWeekPage from "./pages/workedPerWeekPage";
import AnswersPage from "./pages/answersPage";
import LeaveYearStartPage from "./pages/leaveYearStartPage";
import calculateHolidayPage from "./pages/calculateHolidayPage";
import CalculateHolidayPage from "./pages/calculateHolidayPage";
import employmentStartDatePage from "./pages/employmentStartDatePage";
import EmploymentStartDatePage from "./pages/employmentStartDatePage";
import employmentEndDatePage from "./pages/employmentEndDatePage";
import EmploymentEndDate from "./pages/employmentEndDatePage";
import hoursInEachShiftPage from "./pages/hoursInEachShiftPage";
import HoursInEachShiftPage from "./pages/hoursInEachShiftPage";
import shiftsPerShiftPatternPage from "./pages/shiftsPerShiftPatternPage";
import ShiftsPerShiftPatternPage from "./pages/shiftsPerShiftPatternPage";
import daysInTheShiftPatternPage from "./pages/daysInTheShiftPatternPage";
import DaysInTheShiftPatternPage from "./pages/daysInTheShiftPatternPage";

test(`Page object model happy path for second test`, async ({ page }): Promise<void> => {
    const landingPage: LandingPage = new LandingPage();
    await landingPage.checkPageLoads(page);
    await landingPage.continueOn(page);
    const irregularHoursPage: IrregularHoursPage = new IrregularHoursPage();
    await irregularHoursPage.checkPageLoads(page);
    await irregularHoursPage.selectNo(page);
    await irregularHoursPage.continueOn(page);
    const entitlementBasedOnPage: HolidayEntitlementPage = new HolidayEntitlementPage();
    await entitlementBasedOnPage.checkPageLoads(page);
    await entitlementBasedOnPage.continueOn(page);
    const workOutHolidayPage: WorkOutHolidayPage = new WorkOutHolidayPage();
    await workOutHolidayPage.checkPageLoads(page);
    await workOutHolidayPage.continueOn(page);
    const workedPerWeekPage: WorkedPerWeekPage = new WorkedPerWeekPage();
    await workedPerWeekPage.checkPageLoads(page);
    await workedPerWeekPage.continueOn(page);
    const answersPage: AnswersPage = new AnswersPage();
    await answersPage.checkPageLoads(page);
});

test(`Page object model for Calculate Holiday Entitlement for a full leave year with annualised hours and other options`, async ({ page }): Promise<void> => {
    const landingPage: LandingPage = new LandingPage();
    await landingPage.checkPageLoads(page);
    await landingPage.continueOn(page);
    const irregularHoursPage: IrregularHoursPage = new IrregularHoursPage();
    await irregularHoursPage.checkPageLoads(page);
    await irregularHoursPage.selectYes(page);
    await irregularHoursPage.continueOn(page);
    const leaveYearStartPage = new LeaveYearStartPage();
    await leaveYearStartPage.checkPageLoads(page);
    await leaveYearStartPage.continueOn(page);
    const entitlementBasedOnPage: HolidayEntitlementPage = new HolidayEntitlementPage();
    await entitlementBasedOnPage.checkPageLoads(page);
    await entitlementBasedOnPage.continueOnWithAnnualisedHours(page);
    const workOutHolidayPage: WorkOutHolidayPage = new WorkOutHolidayPage();
    await workOutHolidayPage.checkPageLoads(page);
    await workOutHolidayPage.continueOn(page);
});

test(`Calculate Holiday Entitlement for someone starting and leaving part way through a leave year with shifts and other options`, async ({ page }): Promise<void> => {
    const landingPage: LandingPage = new LandingPage();
    await landingPage.checkPageLoads(page);
    await landingPage.continueOn(page);
    const irregularHoursPage: IrregularHoursPage = new IrregularHoursPage();
    await irregularHoursPage.checkPageLoads(page);
    await irregularHoursPage.selectYes(page);
    await irregularHoursPage.continueOn(page);
    const leaveYearStartPage = new LeaveYearStartPage();
    await leaveYearStartPage.checkPageLoads(page);
    await leaveYearStartPage.continueOn(page);
    const entitlementBasedOnPage: HolidayEntitlementPage = new HolidayEntitlementPage();
    await entitlementBasedOnPage.checkPageLoads(page);
    await entitlementBasedOnPage.continueOnWithShifts(page);
    const calculateHolidayPage: calculateHolidayPage = new CalculateHolidayPage();
    await calculateHolidayPage.checkPageLoads(page);
    await calculateHolidayPage.continueOnWithLastOption(page);
    const employmentStartDatePage: employmentStartDatePage = new EmploymentStartDatePage();
    await employmentStartDatePage.checkPageLoads(page);
    await employmentStartDatePage.continueOn(page);
    const employmentEndDatePage: employmentEndDatePage = new EmploymentEndDate();
    await employmentEndDatePage.checkPageLoads(page);
    await employmentEndDatePage.continueOn(page);
    const hoursInEachShiftPage: hoursInEachShiftPage = new HoursInEachShiftPage();
    await hoursInEachShiftPage.checkPageLoads(page);
    await hoursInEachShiftPage.continueOn(page);
    const shiftsPerShiftPatterPage: shiftsPerShiftPatternPage = new ShiftsPerShiftPatternPage();
    await shiftsPerShiftPatterPage.checkPageLoads(page);
    await shiftsPerShiftPatterPage.continueOn(page);
    const daysInTheShiftPatternPage: daysInTheShiftPatternPage = new DaysInTheShiftPatternPage();
    await daysInTheShiftPatternPage.checkPageLoads(page);
    await daysInTheShiftPatternPage.continueOn(page);
});

test(`Page object model unhappy path`, async ({ page }): Promise<void> => {
    const landingPage: LandingPage = new LandingPage();
    await landingPage.checkPageLoads(page);
    await landingPage.continueOn(page);
    const irregularHoursPage: IrregularHoursPage = new IrregularHoursPage();
    await irregularHoursPage.checkPageLoads(page);
    await irregularHoursPage.triggerErrorMessages(page);
});
